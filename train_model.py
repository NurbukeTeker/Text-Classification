# -*- coding: utf-8 -*-
"""Train Text Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPZfPm8zyE9tnVmxjFRYcSzI2xNla6tu

## Loading the dataset
"""

# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/drive')

import zipfile
zip_ref = zipfile.ZipFile('/content/drive/My Drive/dataset.zip', 'r')
zip_ref.extractall()
zip_ref.close()

"""## Importing Libraries"""

import numpy as np
import re
import pickle 
import nltk
from nltk.corpus import stopwords
from sklearn.datasets import load_files
nltk.download('stopwords')

"""## Unpickling the dataset"""

with open('dataset/X.pickle','rb') as f:
    X = pickle.load(f)
    
with open('dataset/y.pickle','rb') as f:
    y = pickle.load(f)

"""## Creating the Corpus"""

corpus = []
for i in range(len(X)):
    review = re.sub(r'\W', ' ', str(X[i]))
    review = review.lower()
    review = re.sub(r'^br$', ' ', review)
    review = re.sub(r'\s+br\s+',' ',review)
    review = re.sub(r'\s+[a-z]\s+', ' ',review)
    review = re.sub(r'^b\s+', '', review)
    review = re.sub(r'\s+', ' ', review)
    corpus.append(review)

"""## Creating the BOW Model"""

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(max_features=2000,min_df = 3,max_df = 0.6,stop_words=stopwords.words('english'))
X = vectorizer.fit_transform(corpus).toarray()

"""## Convert BOW to TF-TDF model"""

from sklearn.feature_extraction.text import TfidfTransformer
transformer = TfidfTransformer()
X = transformer.fit_transform(X).toarray()

"""## Creating the Tf-Idf model directly"""

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(max_features = 2000, min_df = 3, max_df = 0.6, stop_words = stopwords.words('english'))
X = vectorizer.fit_transform(corpus).toarray()

"""## Splitting the Data"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.20, random_state = 0,shuffle=True)

"""## Training the Models"""

from sklearn.svm import SVC
svm = SVC(C=1000,gamma=0.001)
svm.fit(X_train,Y_train)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(C=6,max_iter = 100000)
classifier.fit(X_train,Y_train)

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=1000)
rf.fit(X_train,Y_train)

"""## Saving the Model"""

!mkdir models
with open('models/vectorizer.pickle','wb') as f:
    pickle.dump(vectorizer,f)

with open('models/svm.pickle','wb') as f:
    pickle.dump(svm,f)
    
with open('models/classifier.pickle','wb') as f:
    pickle.dump(classifier,f)
    
with open('models/rf.pickle','wb') as f:
    pickle.dump(rf,f)